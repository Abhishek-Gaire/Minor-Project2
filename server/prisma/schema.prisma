// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model School {
  id            String    @id @default(uuid())
  schoolName    String    @unique
  schoolAddress String
  city          String
  role          String
  contact       String
  email         String    @unique
  imageUrl      String
  phone         String
  students      Student[]
  teachers      Teacher[]
  admins        Admin[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@map("schools")
}

model Admin {
  id        String   @id @default(uuid())
  name      String
  email     String   @unique
  password  String
  schoolId  String
  school    School   @relation(fields: [schoolId], references: [id])
  createdAt DateTime @default(now())

  @@map("admins")
}

model SuperAdmin {
  id        String   @id @default(uuid())
  name      String
  email     String   @unique
  password  String
  createdAt DateTime @default(now())

  @@map("super_admins") 
}

model Submission {
  id              Int       @id @default(autoincrement())
  studentId       String
  studentName     String
  submissionDate  DateTime? // optional
  grade           Int?      // optional
  submissionFile  String?   // optional
  submissionUrl   String?   // optional
  assignmentId    Int       // foreign key to Assignment

  // Relations
  assignment      Assignment @relation(fields: [assignmentId], references: [id])
}

enum AssignmentStatus {
  Upcoming
  Open
  Closed
  Grading
}

model Assignment {
  id             Int              @id @default(autoincrement())
  title          String
  subject        String
  grade          Int
  description    String
  dueDate        DateTime
  pointsPossible Int
  status         AssignmentStatus
  updatedAt     DateTime @default(now())
  teacherId      String
  totalStudents  Int?

  // Relations
  teacher        Teacher          @relation(fields: [teacherId], references: [id])
  submissions    Submission[]     // assuming a Submission model exists
}


model Conversations {
  id           String     @id @default(uuid())
  participants String[]
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  messages     Messages[]
}

model Messages {
  id             Int           @id @default(autoincrement())
  conversationId String
  sender         String
  receiver       String
  content        String
  timeStamp      DateTime      @default(now())
  delivered      Boolean       @default(false)
  conversation   Conversations @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  @@index([conversationId])
}

model Student {
  id             String          @id @default(uuid())
  name           String
  email          String          @unique
  password       String
  schoolId       String
  school         School          @relation(fields: [schoolId], references: [id])
  createdAt      DateTime        @default(now())
  grade          Grade
  rollNumber     String?
  studentDetails StudentDetails?

  @@map("students")
}

model StudentDetails {
  id                 String       @id @default(uuid())
  studentId          String       @unique
  gender             Gender
  dateOfBirth        DateTime
  section            String       @default("A")
  previousSchool     String?
  academicYear       String
  phone              String
  alternatePhone     String?
  address            String
  city               String
  state              String
  zipCode            String
  parentName         String
  relationship       Relationship
  parentPhone        String
  parentEmail        String       @unique
  bloodGroup         String?
  medicalInformation String?
  hobbies            String?
  extraCurricular    String?
  additionalNotes    String?

  student Student @relation(fields: [studentId], references: [id], onDelete: Cascade)
}

enum Gender {
  male
  female
  other
}

enum Grade {
  G5
  G6
  G7
  G8
  G9
  G10
}

enum Relationship {
  mother
  father
  guardian
  other
}

model ClassChatMessages {
  id        Int      @id @default(autoincrement())
  sender    String
  content   String
  timestamp DateTime @default(now())
  class     String
}

model Teacher {
  id             String          @id @default(uuid())
  name           String
  email          String          @unique
  password       String
  subjects       String[]
  phone          String?
  classes        Int             @default(0)
  grade          Grade[]         @default([G8]) // âœ… enum array with default
  status         TeacherStatus   @default(ACTIVE)
  employmentType EmploymentType  @default(FULLTIME)
  schoolId       String
  school         School          @relation(fields: [schoolId], references: [id])
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt

  teacherDetails TeacherDetails?
  Assignment     Assignment[]
  materials Material[]
}

model Material {
  id        Int      @id @default(autoincrement())
  title     String
  subject   String
  type      String   // e.g., "pdf", "video", "document", etc.
  fileUrl   String
  fileName  String
  fileType  String   // MIME type
  fileSize  Int      // Size in bytes
  teacherId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  teacher   Teacher  @relation(fields: [teacherId], references: [id], onDelete: Cascade)
}

model TeacherDetails {
  id               String    @id @default(uuid())
  teacherId        String    @unique
  teacher          Teacher   @relation(fields: [teacherId], references: [id], onDelete: Cascade)
  address          String?
  city             String?
  state            String?
  zipCode          String?
  dateOfBirth      DateTime?
  qualification    String?
  experience       Int?
  specialization   String?
  emergencyContact String?
  joinDate         DateTime?
  additionalNotes  String?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
}

enum TeacherStatus {
  ACTIVE
  INACTIVE
  ONLEAVE
  TERMINATED
}

enum EmploymentType {
  FULLTIME
  PARTTIME
  CONTRACT
  TEMPORARY
}
