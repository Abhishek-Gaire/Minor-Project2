// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model School {
  id        String   @id @default(uuid())
  schoolName      String   @unique
  schoolAddress   String
  city      String
  role      String
  contact   String
  email     String   @unique
  imageUrl  String
  phone     String
  students  Student[]
  teachers  Teacher[]
  admins    Admin[]
  createdAt DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@map("schools")
}

model Teacher {
  id       String @id @default(uuid())
  name     String
  email    String @unique
  password String
  schoolId String
  school   School @relation(fields: [schoolId], references: [id])
  createdAt DateTime @default(now())

  @@map("teachers")
}

model Admin {
  id       String @id @default(uuid())
  name     String
  email    String @unique
  password String
  schoolId String
  school   School @relation(fields: [schoolId], references: [id])
  createdAt DateTime @default(now())

  @@map("admins")
}

model SuperAdmin {
  id       String @id @default(uuid())
  name     String
  email    String @unique
  password String
  createdAt DateTime @default(now())

  @@map("super_admins")
}

model Assignment {
  id           String   @id @default(uuid())
  title        String
  fileUrl      String
  uploadedById String
  role         String
  uploadedAt   DateTime @default(now())

  // Relations
  student Student? @relation(fields: [uploadedById], references: [id])
  teacher Teacher? @relation(fields: [uploadedById], references: [id])
}

model Conversations {
  id           String    @id @default(uuid())
  participants String[] 
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  messages     Messages[]
}

model Messages {
  id             Int   @id @default(autoincrement())
  conversationId String
  sender         String
  receiver       String
  content        String
  timeStamp      DateTime @default(now())
  delivered      Boolean  @default(false)
  conversation   Conversations @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  
  @@index([conversationId])
}

model Student {
  id         String @id @default(uuid())
  name       String
  email      String @unique
  password   String
  schoolId   String
  school     School @relation(fields: [schoolId], references: [id])
  createdAt  DateTime @default(now())
  grade      Grade
  rollNumber String?
  studentDetails StudentDetails?

  @@map("students")
}

model StudentDetails {
  id                 String  @id @default(uuid())
  studentId          String  @unique
  gender             Gender
  dateOfBirth        DateTime
  section            String @default("A")
  previousSchool     String?
  academicYear       String
  phone              String
  alternatePhone     String?
  address            String
  city               String
  state              String
  zipCode            String
  parentName         String
  relationship       Relationship
  parentPhone        String
  parentEmail        String  @unique
  bloodGroup         String?
  medicalInformation String?
  hobbies            String?
  extraCurricular    String?
  additionalNotes    String?

  student            Student @relation(fields: [studentId], references: [id], onDelete: Cascade)
}

enum Gender {
  male
  female
  other
}

enum Grade {
  G5
  G6
  G7
  G8
  G9
  G10
}

enum Relationship {
  mother
  father
  guardian
  other
}

model ClassChatMessages{
  id Int  @id @default(autoincrement())
  sender String
  content String
  timestamp DateTime  @default(now())
  class String
}
